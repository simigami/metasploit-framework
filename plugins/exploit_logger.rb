require 'msf/core'
require 'csv'

module Msf
    class Plugin::ExploitLogger < Msf::Plugin
        def initialize(framework, opts)
            super
            add_console_dispatcher(ExploitLoggerCommandDispatcher)
        end

        def cleanup
        remove_console_dispatcher('ExploitLoggerCommandDispatcher')
        end

        def name
            "exploit_logger"
        end

        def desc
            "Plugin to automatically log all exploit activities."
        end

        class ExploitLoggerCommandDispatcher
            include Msf::Ui::Console::CommandDispatcher

            def name
                "ExploitLogger"
            end

            def commands
             {
                 "exploit_logger" => "Runs the exploit command with logging to a specified file."
             }
            end

            def cmd_exploit_logger(*args) 
                return if args.empty?
                
                print_good(self.driver.active_module.datastore)
                log_data = { 
                  time: Time.now.to_s,
                  exploit: self.driver.active_module.fullname,
                  target: self.driver.active_module.datastore['RHOSTS'],
                  payload: self.driver.active_module.datastore['PAYLOAD'],
                  status: 'Attempted',
                  username: 'admin',  ## 임의
                  vulnerability: args[0], ## 임의
                  comments: ''
                }
        
                initial_sessions = self.framework.sessions.length

                # Run the exploit
                self.driver.run_single("use #{self.driver.active_module.fullname}")
                self.driver.run_single("set RHOSTS #{self.driver.active_module.datastore['RHOSTS']}")
                if self.driver.active_module.datastore['PAYLOAD'].nil?
                    print_error("Payload has not been set.")
                else
                    print_good("Payload is set to #{self.driver.active_module.datastore['PAYLOAD']}.")
                end
                self.driver.run_single("run")
                
                timestamp = Time.now.strftime("%Y%m%d%H%M%S%L")
                if self.framework.sessions.length > initial_sessions
                    log_data[:status] = 'Successful'
                    log_data[:comments] = 'System compromised'
                    #File.open("C:/Users/Signal_Yeo/Desktop/북산고 캡스톤/metasploit-framework/log/#{timestamp}.json", "a") do |f|
                     # f.write(log_data.to_json)
                    #end
                    print_good("Exploit activity has been logged as successful.")
                else
                    log_data[:status] = 'Failed'
                    log_data[:comments] = 'Vulnerability not present'
                    #File.open("C:/Users/Signal_Yeo/Desktop/북산고 캡스톤/metasploit-framework/log/#{timestamp}.json", "a") do |f|
                     # f.write(log_data.to_json)
                    #end
                    print_error("Exploit activity has been logged as failed.")
                end

                file_path = "C:/Users/Signal_Yeo/Desktop/북산고 캡스톤/metasploit-framework/log/exploit_log.csv"
    
                CSV.open(file_path, "ab") do |csv|
                    if File.size?(file_path).nil? # checks if the file is empty
                        csv << log_data.keys
                    end
                    csv << log_data.values
                end

            end
        end
    end
end